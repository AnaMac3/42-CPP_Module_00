CPP_Module_00

Formato y convenciones:

- Compilar con c++ -Wall -Wextra -Werror
- El código tiene que seguir compilando si añades flag -std=c++98
- Directorios de ejercicios: ex00, ex01... exn
- Llamar a los archivos, clases, funciones, miembros de funciones y atributos como se requiere en los enunciados
- Nombres de clases en formato UpperCamelCase
- Los archivos que contengan el código de las clases se llamarán siempre de acuerdo al nombre de la clase (ClassName.hpp/ClassName.h, ClassName.cpp, ClassName.tpp). 
- A no ser que se especifique lo contrario, todos los mensajes de output deben terminar en newline y deben devolverse por el standard output
- No hay norminette, no coding style

Allowed/Forbidden:

- Permitido usar todo de la librería estándar. Es mejor usar las versiones de C++ de las funciones de C a las que estás acostumbrada
- No se pueden usar librerías externas: C++11 y formas derivadas y librerías Boost están prohibidas.
- Las funciones *printf(), *alloc() y free() están prohibidas
- Excepto que se especifique lo contrario, está prohibidas las palabras clave using namespace <ns_name> y friend
- Está permitido usar el STL solo en módulos 08 y 09. Eso significa: no Containers (vector/lista/mapa) y no Algorithms (nada que requiera incluir el header <algorithm>)

Diseño:
- Evitar memory leaks cuando se aloja memoria usando la palabra clave new
- Del módulo 02 al módulo 09, las clases tienen que ser diseñadas en el Orthodox Canonical Form, excepto cuando se especifica lo contrario
- Toda implementación de función puesta en el archivo header implica un 0 (excepto para function templates)
- Has de ser capaz de usar tus headers independientemente de otros. Por lo que deben incluir todas las dependencias que necesitan. Debes evitar el problema de doble inclusión añadiendo include guards. 

Read me:
- Se pueden añadir files adicionales si quieres (i.e., to split your code)
- A veces, las guidelines de un ejercicio parecen cortas pero los ejemplos pueden mostrar requerimientos que no están explícitamente escritos en las instrucciones

Makefile: 
- Mismas normas que para C (capítulo Norm para Makefile)



Exercise 00: Megaphone
	ex00
	Makefile, megaphone.cpp
	Forbidden functions: None
	
	Escribir un programa que genere el siguiente output:
	>./megaphone "shhhhh... I think the students are asleep..."
	SHHHHH... I THINK THE STUDENTS ARE ASLEEP...
	$>./megaphone Damnit " ! " "Sorry students, I thought this thing was off."
	DAMNIT ! SORRY STUDENTS, I THOUGHT THIS THING WAS OFF.
	$>./megaphone
	* LOUD AND UNBEARABLE FEEDBACK NOISE *
	
Es decir, un programa que devuelva por stdout el o los argumentos pasados al programa en mayúsculas. Las comillas dobles separan argumentos... Si se llama solo al programa sin argumentos, imprime *LOUD AND UNBEARABLE...*

	<iostream> -> libreria de entrada/salida, necesaria para std::cout (imprimir en pantalla)
	std::out -> objeto de salida estándar (stdout)  -> es un OBJETO
	<< -> inserta texto al flujo de salida -> es un OPERADOR
	srtd:endl -> es como \n y tambien fuerza a imprimir inmediatamente -> es una FUNCIÓN
	
	for(int j=0; argv[i][j]; j++) -> recorre caracter por caracter argv[i]
	std::cout << (char) std::toupper(argv[i][j]) -> convierte a mayúscula un caracter y lo imprime en stdout. std::toupper() devuelve un int, no un char, por eso ponemos char
		std::toupper -> es una FUNCIÓN
	std -> es un NAMESPACE, un espacio de nombres, una forma de organizar el código y evitar conflictos entre nombres. std es el namespace de la biblioteca estándar de C++.

	Aparte: cuando pones "!" en la terminal, se queda esperando a que cierres comillas, probablemente porque interpreta ! como parte de una expansión; hay que pasarlo en comillas simples o con espacio si comillas dobles.
	
	
Exercise 01: My Awesome PhoneBook
	ex01
	Makefile, *.cpp, *.{h, hpp}
	Forbidden functions: None
	
	Implementar dos clases:
		- PhoneBook: array de contactos. Puede almacenar un máximo de 8 coontactos. Si el usuario intenta añadir un 9th contacto, reemplaza el más antiguo por el nuevo. No se puede alocar memoria dinámica
		- Contact: representa un contacto del phonebook.
	En tu código, el phonebook debe ser instanciado como una instancia de la clase PhoneBook; lo mismo para los contactos, cada uno de ellos debe ser una instancia de la clase Contact. 
	Todo lo que es usado siempre dentro de la clase es privado, y lo que puede ser usado desde fuera de la clase, es público.
	Cuando empieza el programa, el phonebook está vacío.
	El programa solo acepta ADD, SEARCH y EXIT:
		- ADD: guarda un nuevo contacto: si el usuario mete este comando, they are prompted para meter la infor del nuevo contacto, los campos se piden de uno en uno. Una vez ha llenado todos los campos, se añade el contacto al notebook
		- SEARCH: devuelve un contacto específico. 
			- Devuelve los contactos como una lista de 4 columnas: index, first name, last name, nickname. 
			- Cada columna debe tener 10 caracteres de ancho. Un caracter de pipe los seara. El texto debe estar alineado a la derecha. Si el texto es más largo que la columna, debe ser truncado y el último caracter devuelto debe ser reemplazado por un punto. 
			- Luego, se le pide al usuario el índice de la entrada que quiere que le devolvemoas. Si el índice está fuera de rango o es inválido, definir un comportamiento adecuado. Si no, devolver la info del contacto, una línea por campo. 
		- EXIT: sale del programa y se pierden los contactos.
	Cualquier otro input es ignorado.
	Cuando un comando se ha ejecutado correctamente, el programa espera otro comando. Sale cuando el usuario mete EXIT. 
	Poner un nombre adecuado para el ejecutable. 
	
String class -> https://cplusplus.com/reference/string/string/#google_vignette
IO Manipultors -> https://cplusplus.com/reference/iomanip/
	
	
	
	
	
	
	
	
	
	

